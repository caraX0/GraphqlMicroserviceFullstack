version: 2.1

orbs:
  snyk: snyk/snyk@1.2.3

aliases:
  - &maven-settings-file
      "\"<settings xsi:schemaLocation='http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd' xmlns='http://maven.apache.org/SETTINGS/1.1.0'
              xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>
            <servers>
              <server>
                   <id>github</id>
                   <username>$GITHUB_USERNAME</username>
                   <password>$GITHUB_PASSWORD</password>
              </server>
              <server>
                    <id>registry-1.docker.io</id>
                    <username>$DOCKER_REGISTRY_USERNAME</username>
                    <password>$DOCKER_REGISTRY_PASSWORD</password>
              </server>
            </servers>
          </settings>\""
commands:
  generate-maven-settings-file:
    parameters:
      settings-file:
        type: string
    steps:
      - run:
          name: Generate Maven Settings File
          command: |
            mkdir -p ~/.m2
            echo -e << parameters.settings-file >> > ~/.m2/settings.xml

jobs:
  build:
    machine:
      image: ubuntu-2204:2022.07.1
      docker_layer_caching: true
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      - generate-maven-settings-file:
          settings-file: *maven-settings-file
      - run:
          name: Print Java Version
          command: java -version
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Install Dependencies
          command: mvn dependency:go-offline
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: true
          severity-threshold: low
          token-variable: SNYK_TOKEN
      - run:
          name: Test
          command: mvn -ntp clean verify
      - run:
          name: Packaging
          command: mvn -ntp package -DskipTests
      - run:
          name: Quality Analysis
          command: mvn -ntp -Psonar initialize sonar:sonar -Dsonar.login=$SONAR_TOKEN
      - run:
          name: Install Rover
          command: |
            # download and install Rover
            curl -sSL https://rover.apollo.dev/nix/v0.8.1 | sh

            # This allows the PATH changes to persist to the next `run` step
            echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      - run:
          name: Rover Check Subgraph
          command: rover subgraph check $APOLLO_GRAPH_REF --schema src/main/resources/graphql/schema.graphqls --name $APOLLO_SUBGRAPH_NAME
      - run:
          name: Rover Publish Subgraph
          command: rover subgraph publish $APOLLO_GRAPH_REF --routing-url $APOLLO_SUBGRAPH_ROUTING_URL --schema src/main/resources/graphql/schema.graphqls --name $APOLLO_SUBGRAPH_NAME
      - run:
          name: Publish Docker
          command: mvn -ntp -Pjib jib:build -DskipTests